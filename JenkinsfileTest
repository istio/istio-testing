#!groovy

// For testing push your code to the testing branch of istio/istio-testing
// and create a PR from there.

@Library('testutils@testing')

import org.istio.testutils.Utilities
import static org.istio.testutils.Utilities.failIfNullOrEmpty
import org.istio.testutils.GitUtilities
import org.istio.testutils.Bazel

// Utilities shared amongst modules
def gitUtils = new GitUtilities()
def utils = new Utilities()
def bazel = new Bazel()

mainFlow(utils) {
  pullRequest(utils) {

    node {
      gitUtils.initialize()
      bazel.setVars()
    }

    if (utils.runStage('PRESUBMIT')) {
      def branches = [
          'goBuildNode': {
            goBuildNode(gitUtils, 'istio.io/istio-testing') {
              echo(env.PATH)
              echo(env.GOPATH)
              bazel.fetch('//...')
              bazel.build('//...')
              commentOnPr(utils, "This is a test.")
            }
          },
          'defaultNode': {
            defaultNode(gitUtils) {
              sh('ls -all')
            }
          },
          'buildNode': {
            buildNode(gitUtils) {
              sh('ls -all')
              bazel.version()
            }
          },
          'testNode': {
            testNode(gitUtils) {
              sh('ls -all')
            }
          }
      ]
      parallel(branches)
    }
  }
}

def commentOnPr(utils, message) {
  // Passed in by GitHub Integration plugin
  def pr = failIfNullOrEmpty(env.GITHUB_PR_NUMBER)
  def owner = utils.getParam('GITHUB_OWNER', 'istio')
  def repo = failIfNullOrEmpty(utils.getParam('GITHUB_REPO'), 'GITHUB_REPO build parameter needs to be set!')
  def tokenFile = '/tmp/token.jenkins'
  utils.createTokenFile(tokenFile)
  sh("github_helper --owner=${owner} " +
      "--repo=${repo} " +
      "--pr=${pr} " +
      "--token_file=${tokenFile} " +
      "--comment=\"${message}\"")
}