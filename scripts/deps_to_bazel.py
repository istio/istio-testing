#!/usr/bin/python

"""Read files generated by golang dep and create a file compatible with Bazel.
"""
import collections


NAME = "name"
IMPORTPATH = "importpath"
REVISION = "revision"
COMMIT = "commit"
VENDOR_FILE = "go_vendor_repositories.bzl"
GODEP_LOCK = "Gopkg.lock"

go_repos_header = """load("@io_bazel_rules_go//go:def.bzl", "go_repository")

def go_vendor_repositories():"""

go_repo_template = """
  go_repository(
    name = "{name}",
    commit = "{commit}",
    importpath = "{importpath}",
  )
"""

GoRepository = collections.namedtuple("GoRepository", [NAME, IMPORTPATH, COMMIT])


def convert_importpath_to_name(import_path):
  components = import_path.split("/")
  labels = components[0].split(".")
  reverse = []
  for i in range(len(labels)):
    l = labels[len(labels)-i-1]
    reverse.append(l)
  repo = "_".join(reverse + components[1:])
  return repo.replace("-", "_").replace(".", "_")

def parse_godep_lock():
  go_reps = []

  with open(GODEP_LOCK, "r") as f:
    name, importpath, commit = "", "", ""
    line = "start"
    while line:
      line = f.readline()
      if line.startswith("["):
        if importpath and commit:
          go_reps.append(GoRepository(name, importpath, commit))
        name, importpath, commit = "", "", ""

      if " = " not in line:
        continue
      key, value = line.split(" = ")
      key = key.strip().replace("\"", "")
      value = value.strip().replace("\"", "")
      if key == NAME:
        importpath = value
        name = convert_importpath_to_name(value)
      elif key == REVISION:
        commit = value


  return go_reps


def write_bzl_file(go_deps):
  with open(VENDOR_FILE, "w") as f:
    f.write(go_repos_header)
    for d in go_deps:
      f.write(go_repo_template.format(name=d.name, commit=d.commit, importpath=d.importpath))


if __name__ == "__main__":
  go_deps = parse_godep_lock()
  write_bzl_file(go_deps)
