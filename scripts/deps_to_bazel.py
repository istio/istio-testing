#!/usr/bin/python
# Copyright 2017 Istio Authors

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

"""
Read files generated by golang dep and create a file compatible with Bazel.
"""
import os
import yaml

NAME = "name"
IMPORTPATH = "importpath"
REVISION = "revision"
COMMIT = "commit"
OPTIONS = "options"
VENDOR_FILE = "go_vendor_repositories.bzl"
GODEP_LOCK = "Gopkg.lock"
VENDOR_OPTIONS = "vendor.options"

go_repos_header = """load("@io_bazel_rules_go//go:def.bzl", "go_repository")

def go_vendor_repositories():"""

go_repo_template = """
  go_repository(
{content}  )
"""


def go_repository_format(repo):
  content = ""
  name = repo[NAME]
  del repo[NAME]
  content = "    name = \"%s\",\n" % name
  for k, v in sorted(repo.iteritems(), key=lambda (k,v): k):
    content += "    {k} = \"{v}\",\n".format(k=k, v=v)
  return go_repo_template.format(content=content)


def convert_importpath_to_name(import_path):
  components = import_path.split("/")
  labels = components[0].split(".")
  reverse = []
  for i in range(len(labels)):
    l = labels[len(labels)-i-1]
    reverse.append(l)
  repo = "_".join(reverse + components[1:])
  return repo.replace("-", "_").replace(".", "_")


class GoVendors(object):

  def __init__(self):
    self._go_repos = []
    self._vendor_options = {}

  def _get_options(self, name):
    return self._vendor_options.get(name, {})

  def load_vendor_options(self):
    if not os.path.exists(VENDOR_OPTIONS):
      return
    with open(VENDOR_OPTIONS) as f:
      self._vendor_options = yaml.load(f)

  def _add_repo(self, importpath, commit):
    name = convert_importpath_to_name(importpath)
    repo = self._get_options(name)
    repo[NAME] = name
    repo[IMPORTPATH] = importpath
    repo[COMMIT] = commit
    self._go_repos.append(repo)

  def parse_godep_lock(self):
    with open(GODEP_LOCK, "r") as f:
      name, importpath, commit = "", "", ""
      line = "start"
      while line:
        line = f.readline()
        if line.startswith("["):
          if importpath and commit:
            self._add_repo(importpath, commit)
          name, importpath, commit = "", "", ""

        if " = " not in line:
          continue
        key, value = line.split(" = ")
        key = key.strip().replace("\"", "")
        value = value.strip().replace("\"", "")
        if key == NAME:
          importpath = value
        elif key == REVISION:
          commit = value

  def write_bzl_file(self):
    with open(VENDOR_FILE, "w") as f:
      f.write(go_repos_header)
      for r in self._go_repos:
        f.write(go_repository_format(r))


if __name__ == "__main__":
  g = GoVendors()
  g.load_vendor_options()
  g.parse_godep_lock()
  g.write_bzl_file()
