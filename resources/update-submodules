#!/bin/bash
#
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
#

function set_git() {
  if [[ ! -e "${HOME}/.gitconfig" ]]; then
    cat > "${HOME}/.gitconfig" << EOF
[user]
  name = istio-testing
  email = istio.testing@gmail.com
EOF
  fi
  # In order to have bazel fetch PRs
  git config --global --add remote.origin.fetch \
    "+refs/pull/*/head:refs/remotes/origin/pr/*" \
    || error_exit 'Cannot set git config.'
}

# Exit with a message and an exit code.
# Arguments:
#   $1 - string with an error message
#   $2 - exit code, defaults to 1
function error_exit() {
  # ${BASH_SOURCE[1]} is the file name of the caller.
  echo "${BASH_SOURCE[1]}: line ${BASH_LINENO[0]}: ${1:-Unknown Error.} (exit ${2:-1})" 1>&2
  exit ${2:-1}
}

function update_file() {
  local file="${1}"
  local key="${2}"
  local sha="${3}"

  sed -i -e "s|${key}\s=.*|${key} = \"${sha}\"|" "${file}" \
    || error_exit "Could not update WORKSPACE for ${key}."
}

function commit_file() {
  local file="${1}"
  local key="${2}"

  git add "${file}" \
    && git commit -m "Updates ${key} in ${file}" \
    || error_exit "Could not create commit for ${key} update in ${file}."
}

while getopts :s: arg; do
  case ${arg} in
    s) SUBMODULES="${OPTARG}";;
    *) echo "Invalid option: -${OPTARG}";;
  esac
done

[[ -z "${SUBMODULES}" ]] && exit 0

set_git

# SUBMODULES if of the form FILE1:KEY1:SHA1,FILE2:KEY2:SHA2
IFS=',' read -ra SUBMODULES <<< "${SUBMODULES}"
for SUBMODULE in "${SUBMODULES[@]}"; do
  IFS=':' read FILE KEY SHA <<< "${SUBMODULE}"
  update_file "${FILE}" "${KEY}" "${SHA}"
  commit_file "${FILE}" "${KEY}"
done

